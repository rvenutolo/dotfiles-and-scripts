#!/usr/bin/env bash

if [[ "${COLORTERM}" == "gnome-"* && "${TERM}" == "xterm" ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM='gnome-256color'
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM='xterm-256color'
fi

prompt_git() {
    # Check if the current directory is in a Git repository.
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then
        local pre_git_branch
        pre_git_branch="${1}"
        local git_branch
        local pre_git_status
        pre_git_status="${2}"
        local git_status
        git_status=''
        local post_git_status
        post_git_status="${3}"
        # Check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then
            # Ensure the index is up to date.
            git update-index --really-refresh -q &>/dev/null
            # Check for un-committed changes in the index.
            if ! $(git diff --quiet --ignore-submodules --cached); then
                git_status+='+'
            fi
            # Check for un-staged changes.
            if ! $(git diff-files --quiet --ignore-submodules --); then
                git_status+='!'
            fi
            # Check for un-tracked files.
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                git_status+='?'
            fi
            # Check for stashed files.
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                git_status+='$'
            fi
        fi
        # Get the short symbolic ref.
        # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
        # Otherwise, just give up.
        git_branch="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
            git rev-parse --short HEAD 2> /dev/null || \
            echo '(unknown)')"
        if [[ -n "${git_status}" ]]; then
            echo -e "${pre_git_branch}${git_branch}${pre_git_status}${git_status}${post_git_status}"
        else
            echo -e "${pre_git_branch}${git_branch}"
        fi
    else
        return
    fi
}

if tput setaf 1 &> /dev/null; then
    tput sgr0 &> /dev/null # reset colors
    bold=$(tput bold)
    reset=$(tput sgr0)
    # Solarized colors, taken from http://git.io/solarized-colors.
    black=$(tput setaf 0)
    blue=$(tput setaf 33)
    cyan=$(tput setaf 37)
    green=$(tput setaf 64)
    orange=$(tput setaf 166)
    purple=$(tput setaf 125)
    red=$(tput setaf 124)
    violet=$(tput setaf 61)
    white=$(tput setaf 15)
    yellow=$(tput setaf 136)
else
    bold=''
    reset="\e[0m"
    black="\e[1;30m"
    blue="\e[1;34m"
    cyan="\e[1;36m"
    green="\e[1;32m"
    orange="\e[1;33m"
    purple="\e[1;35m"
    red="\e[1;31m"
    violet="\e[1;35m"
    white="\e[1;37m"
    yellow="\e[1;33m"
fi

if [[ "${USER}" == "root" ]]; then
    user_color="${red}"
    prompt_char='#'
else
    user_color="${orange}"
    prompt_char='$'
fi

if [[ "${SSH_CONNECTION}" ]]; then
    host_color="${red}"
else
    host_color="${yellow}"
fi

space=' '
newline='\n'
timestamp="\[${cyan}\]\t"
user="\[${user_color}\]\u"
at="\[${white}\]@"
host="\[${host_color}\]\h"
in="\[${white}\]→"
dir="\[${green}\]\w"
# Need FiraCode or Hack fonts for branch symbol
pre_git_branch="\[${white}\]  \[${violet}\]"
pre_git_status="\[${blue}\]["
post_git_status="]"
prompt="\[${white}\]${prompt_char}"
reset="\[${reset}\]"
continuation="\[${yellow}\]→"

PS1="\[\033]0;\W\007\]"
PS1+="\[${bold}\]"
#PS1+="${newline}"
if [[ -n "${SSH_CONNECTION}" ]]; then
    # SSH'd
    PS1+="${user}"
    PS1+="${at}"
    PS1+="${host}"
    PS1+="${space}"
elif [[ "${LOGNAME}" != "${USER}" ]] || [[ "${USER}" == 'root' ]]; then
    # Not me
    PS1+="${user}"
    PS1+="${space}"
else
    # Me
    :
fi
PS1+="${in}"
PS1+="${space}"
PS1+="${dir}"
PS1+="\$(prompt_git \"${pre_git_branch}\" \"${pre_git_status}\" \"${post_git_status}\")"
PS1+="${newline}"
#PS1+="${space}"
#PS1+="${space}"
PS1+="${prompt}"
PS1+="${space}"
PS1+="${reset}"
export PS1

PS2="\[${bold}\]"
PS2+="${space}"
PS2+="${space}"
PS2+="${continuation}"
PS2+="${space}"
PS2+="${reset}"
export PS2
