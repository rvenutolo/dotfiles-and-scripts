#!/usr/bin/env bash

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM='gnome-256color'
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM='xterm-256color'
fi

prompt_git() {
    # Check if the current directory is in a Git repository.
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then
        local branchName
        local s
        s=''
        # Check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then
            # Ensure the index is up to date.
            git update-index --really-refresh -q &>/dev/null
            # Check for uncommitted changes in the index.
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s+='+'
            fi
            # Check for unstaged changes.
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s+='!'
            fi
            # Check for untracked files.
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s+='?'
            fi
            # Check for stashed files.
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s+='$'
            fi
        fi
        [[ -n "${s}" ]] && s="[${s}]"
        # Get the short symbolic ref.
        # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
        # Otherwise, just give up.
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
            git rev-parse --short HEAD 2> /dev/null || \
            echo '(unknown)')"
        echo -e "${1}${branchName}${2}${s}"
    else
        return
    fi
}

if tput setaf 1 &> /dev/null; then
    tput sgr0 # reset colors
    bold=$(tput bold)
    reset=$(tput sgr0)
    # Solarized colors, taken from http://git.io/solarized-colors.
    black=$(tput setaf 0)
    blue=$(tput setaf 33)
    cyan=$(tput setaf 37)
    green=$(tput setaf 64)
    orange=$(tput setaf 166)
    purple=$(tput setaf 125)
    red=$(tput setaf 124)
    violet=$(tput setaf 61)
    white=$(tput setaf 15)
    yellow=$(tput setaf 136)
else
    bold=''
    reset="\e[0m"
    black="\e[1;30m"
    blue="\e[1;34m"
    cyan="\e[1;36m"
    green="\e[1;32m"
    orange="\e[1;33m"
    purple="\e[1;35m"
    red="\e[1;31m"
    violet="\e[1;35m"
    white="\e[1;37m"
    yellow="\e[1;33m"
fi

if [[ "${USER}" == "root" ]]; then
    userStyle="${red}"
    promptChar="#"
else
    userStyle="${orange}"
    promptChar="$"
fi

if [[ "${SSH_CONNECTION}" ]]; then
    hostStyle="${red}"
else
    hostStyle="${yellow}"
fi

space=" "
newline="\n"
timestamp="\[${cyan}\]\t"
user="\[${userStyle}\]\u"
at="\[${white}\]@"
host="\[${hostStyle}\]\h"
in="\[${white}\]→"
dir="\[${green}\]\w"
prompt="\[${white}\]${promptChar}"
reset="\[${reset}\]"
continuation="\[${yellow}\]→"


PS1="\[\033]0;\W\007\]"
PS1+="\[${bold}\]"
PS1+="${newline}"
if [[ -n "${SSH_CONNECTION}" ]]; then
    PS1+="${user}"
    PS1+="${at}"
    PS1+="${host}"
    PS1+="${space}"
elif [[ "${LOGNAME}" != "${USER}" ]] || [[ "${USER}" == 'root' ]]; then
    PS1+="${user}"
    PS1+="${space}"
else
    :
fi
PS1+="${in}"
PS1+="${space}"
PS1+="${dir}"
PS1+="\$(prompt_git \"\[${white}\]  \[${violet}\]\" \"\[${blue}\]\")"
PS1+="${newline}"
#PS1+="${space}"
#PS1+="${space}"
PS1+="${prompt}"
PS1+="${space}"
PS1+="${reset}"
export PS1

PS2="${continuation} ${reset}"
export PS2
