#!/usr/bin/env bash

set -euo pipefail

if [[ "$#" -ne 0 ]]; then
  echo "${0##*/}: Expected no arguments" >&2
  exit 2
fi

function command_exists() {
  type -P -f "$1" >/dev/null 2>&1
}

function file_exists() {
  [[ -r "$1" && -f "$1" ]]
}

function is_distro() {
  hostnamectl | grep -F 'Operating System:' | cut -d':' -f2 | grep -iwqF "$1"
}

function is_desktop_env() {
  echo "${XDG_CURRENT_DESKTOP}" | grep -iwqF "$1"
}

## 'desktop' 'laptop' 'work'
function is_computer() {
  set +u
  [[ ${RVENUTOLO_COMPUTER,,} == "$1" ]] && is_env='true' || is_env='false'
  set -u
  [[ ${is_env} == 'true' ]]
}

expected_vars=(
  'BROWSER' 'CODE_DIR' 'DE' 'EDITOR' 'FILE_MANAGER' 'GOPATH' 'HIGHLIGHT_OPTIONS' 'JAVA_HOME' 'LANGUAGE' 'LANG'
  'MANPAGER' 'PAGER' 'RVENUTOLO_COMPUTER' 'SDKMAN_DIR' 'VISUAL' 'WTTR_CITY'
)
set +u
for var in "${expected_vars[@]}"; do
  [[ -z "${!var}" ]] && echo "Environment variable not set: ${var}"
done
set -u

expected_cmds=(
  '7z' 'alacritty' 'autojump' 'authy' 'aws' 'aws_completer' 'bat' 'bmon' 'broot' 'btop' 'bunzip2' 'cabextract' 'cargo'
  'checkbashisms' 'clamscan' 'cmake' 'colordiff' 'cpufetch' 'crontab' 'ctop' 'curl' 'dash' 'dig' 'diff-so-fancy'
  'distrobox' 'docker' 'dos2unix' 'edex-ui' 'exa' 'fd' 'fish' 'flatpak' 'flatseal' 'fff' 'fzf' 'gdu' 'git' 'gitkraken'
  'gitui' 'glances' 'glow' 'go' 'gparted' 'gradle' 'groovy' 'gs' 'gunzip' 'highlight' 'hstr' 'http' 'iconv'
  'inotifywait' 'java' 'javac' 'jq' 'kotlin' 'lazydocker' 'lazygit' 'lf' 'locate' 'maldet' 'mcs' 'micro' 'mn' 'moar'
  'mvn' 'mvnd' 'nano' 'ncdu' 'neofetch' 'nnn' 'nvim' 'onefetch' 'oneshot' 'openconnect' 'openvpn' 'pandoc' 'parallel'
  'pcmanfm' 'pip' 'pip3' 'podman' 'pomchecker' 'postman' 'procs' 'psgrep' 'ptop' 'pv' 'px' 'ranger' 'rg' 'riff' 'ruby'
  'rustup' 'sbt' 'scala' 'screen' 'sd' 'shellcheck' 'shfmt' 'skeletal' 'snap' 'sntp' 'spark-submit' 'spring' 'stacer'
  'starship' 'tabs2spaces' 'tar' 'tldr' 'tokei' 'trash' 'tree' 'uncompress' 'unlzma' 'unrar' 'unxz' 'unzip' 'visualvm'
  'vlc' 'wget' 'xsel' 'zip' 'zoxide'
)
if is_computer 'desktop' || is_computer 'laptop'; then
  expected_cmds+=(
    'backintime' 'clapper' 'dnuos' 'eyeD3' 'flac' 'flac2all' 'flac2mp3.pl' 'lame' 'magick' 'mediainfo' 'mogrify'
    'mp3splt' 'puddletag' 'soundkonverter' 'sox' 'speedtest' 'tageditor' 'timeshift' 'ventoy' 'virt-manager' 'virsh'
    'zoom'
  )
fi
if is_distro 'fedora'; then
  expected_cmds+=('alien' 'fedy')
fi
if is_distro 'arch' || is_distro 'manjaro'; then
  expected_cmds+=('pacseek' 'paru' 'yay')
fi
if is_desktop_env 'gnome'; then
  ## TODO move these checks to package checks
  expected_cmds+=('gnome-tweaks' 'gnome-extensions-app')
fi

## remove my bin dirs from path so scripts that mask commands are no longer on PATH, ex: mvn
function path_remove () {
  PATH=$(echo -n "$PATH" | awk -v RS=: -v ORS=: '$0 != "'"$1"'"' | sed 's/:$//')
}
path_remove '/home/rvenutolo/.bin'
path_remove '/home/rvenutolo/.bin/other'

for cmd in "${expected_cmds[@]}"; do
  command_exists "${cmd}" >/dev/null 2>&1 || echo "Command not available: ${cmd}"
done

expected_files=(
  "${HOME}/.config/bash/extra"
  "${HOME}/.gitconfig.private"
  "${HOME}/.ssh/config.private"
  "${HOME}/.sdkman/bin/sdkman-init.sh"
  "${HOME}/.config/broot/launcher/bash/br"
  '/usr/share/git/completion/git-prompt.sh'
)
for file in "${expected_files[@]}"; do
  file_exists "${file}" || echo "Missing file: ${file}"
done

expected_fonts=(
  'Code New Roman' 'Fantasque Sans Mono' 'Fira Code' 'FreeMono' 'Hack' 'Hasklig' 'Inconsolata' 'Input' 'Iosevka'
  'JetBrains Mono' 'JoyPixels' 'Menlo' 'Monoid' 'Mononoki' 'Noto Color Emoji' 'Roboto Mono' 'Source Code Pro'
  'Terminess' 'Ubuntu Mono'
)
installed_fonts="$(fc-list : family)"
for font in "${expected_fonts[@]}"; do
  grep -wiqF "${font}" <<<"${installed_fonts}" ||
    grep -wiqF "${font}TTF" <<<"${installed_fonts}" ||
    grep -wiqF "$(echo -e "${font}" | tr -d '[:space:]')" <<<"${installed_fonts}" ||
    grep -wiqF "$(echo -e "${font}TTF" | tr -d '[:space:]')" <<<"${installed_fonts}" ||
    echo "Font not available: ${font}"
done

expected_services=('docker' 'cups' 'ssh-agent' 'sshd')
if is_computer 'desktop'; then
  expected_services+=('nfs-server')
fi
if is_computer 'desktop' || is_computer 'laptop'; then
  expected_services+=('crashplan-pro')
fi
for service in "${expected_services[@]}"; do
  systemctl is-active --quiet "${service}" ||
    systemctl is-active --user --quiet "${service}" ||
    echo "Service not running: ${service}"
done

if is_computer 'desktop'; then
  # libvirtd goes inactive, but is still enabled
  systemctl is-enabled --quiet 'libvirtd' || echo 'Service not enabled: libvirtd'
fi

expected_groups=('docker' 'sys' 'wheel')
if is_computer 'desktop'; then
  expected_services+=('kvm' 'input' 'libvirt')
fi
actual_groups="$(groups "${USER}")"
for group in "${expected_groups[@]}"; do
  grep -wq "${group}" <<<"${actual_groups}" || echo "User is not in group: ${group}"
done

expected_kvals=(
  'vm.dirty_background_ratio 5'
  'vm.dirty_ratio 5'
  'vm.swappiness 10'
)
for kvals in "${expected_kvals[@]}"; do
  IFS=' ' read -r k v <<<"${kvals}"
  [[ $(sysctl -n "${k}") -le "${v}" ]] || echo "Kernel variable ${k} is >${v}: $(sysctl -n "${k}")"
done

[[ "$(rustup toolchain list)" != stable* ]] && echo "rust toolchain is not 'stable'"

[[ $(timedatectl show) != *'NTP=yes'* ]] && echo 'timedatectl set-ntp is not set'

if command_exists 'flatpak'; then
  flatpak remotes | grep -qwF 'flathub' || echo 'Flathub flatpak repo is not installed'
fi

if is_distro 'fedora'; then
  expected_dnf_conf_vals=('max_parallel_downloads' 'defaultyes' 'keepcache')
  dnf_conf_text="$(cat '/etc/dnf/dnf.conf')"
  for dnf_conf_val in "${expected_dnf_conf_vals[@]}"; do
    [[ -z $(grep -F "${dnf_conf_val}" <<<"${dnf_conf_text}" | cut -d'=' -f2 | xargs) ]] && echo "dnf conf ${dnf_conf_val} is not set"
  done
  installed_packages="$(dnf list --installed | cut -d' ' -f1)"
  expected_rpm_fusions_packages=(
    'rpmfusion-free-appstream-data'
    'rpmfusion-free-release'
    'rpmfusion-nonfree-appstream-data'
    'rpmfusion-nonfree-release'
  )
  for rpm_fusion_pacakge in "${expected_rpm_fusions_packages[@]}"; do
    grep -qF "${rpm_fusion_pacakge}" <<<"${installed_packages}" || echo "${rpm_fusion_pacakge} is not installed"
  done
fi
